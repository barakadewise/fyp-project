# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Opportunity {
  id: Float!
  name: String!
  location: String!
  duration: String!
  creatdAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type OperationDto {
  message: String!
  statusCode: Float!
}

type Project {
  id: Float!
  name: String!
  cost: Float!
  duration: String!
  discription: String!
  status: String!
  funded: Boolean!
  createdAt: DateTime!
}

type Staff {
  id: Float!
  name: String
  email: String
  gender: String
  phone: String
  status: String
  accountId: Float
  account: Account!
  createdAt: String!
  updatedAt: String
}

type Teams {
  id: Float!
  name: String
  location: String
  address: String
  phone: String
  email: String
  status: String
  accountId: Float
  account: Account
  createdAt: DateTime
  updatedAt: DateTime
}

type Youth {
  id: Float!
  fname: String!
  mname: String!
  lname: String!
  phone: String
  address: String
  education: String!
  gender: String
  skills: String!
  location: String
  accountId: Float
  account: Account
  createdAt: DateTime!
}

type Account {
  id: Float!
  email: String
  password: String
  role: String
  lastlogin: DateTime
  team: Teams
  partner: Partner!
  staff: Staff!
  youth: Youth!
  createdAt: DateTime
  updatedAt: DateTime
}

type Partner {
  id: Float!
  name: String
  location: String
  phone: String
  address: String
  status: String
  accountId: Float
  account: Account
  createdAt: DateTime!
  updatedAt: DateTime
}

type AdministrationLevel {
  id: Float!
  name: String!
}

type ResponseDto {
  message: String!
  statusCode: Float!
}

type AuthResults {
  message: String
  id: Float
  username: String
  access_token: String
  role: String
}

type Query {
  findAllOpportunities: [Opportunity!]!
  findAllProjects: [Project!]!
  findAllPartners: [Partner!]!
  findAllYouth: [Youth!]!
  findAllTeams: [Teams!]!
  findAllAccount: [Account!]!
  findAllStaffs: [Staff!]!
}

type Mutation {
  createOpportunity(createOpportunityInput: OpportunityDto!): Opportunity!
  deleteOpportunityById(id: Float!): OperationDto!
  createProject(createProjectInput: ProjectDto!): Project!
  createPartner(createPartnerInput: PartnerDto!, accountId: Float!): Partner!
  createYouth(createYoutDto: YouthDto!, accountId: Float!): Youth!
  deleteYouthById(id: Float!): OperationDto!
  createTeam(createTeamInput: TeamsDto!, accountId: Float!): Teams!
  createAdminLevel(createLevelInput: AdminStrationLevelDto!): AdministrationLevel!
  createAccount(createAccountInput: CreateAccountInput!): Account!
  removeAccount(accountId: Float!): ResponseDto!
  createStaff(createStaffInput: StaffInputDto!, accountId: Float!): Staff!
  login(loginInput: LoginUserDto!): AuthResults!
}

input OpportunityDto {
  name: String!
  location: String!
  duration: String!
}

input ProjectDto {
  name: String!
  cost: Float!
  duration: String!
  discription: String!
  status: String!
  funded: Boolean!
}

input PartnerDto {
  name: String!
  location: String!
  phone: String!
  address: String!
  status: String!
}

input YouthDto {
  fname: String!
  mname: String!
  lname: String!
  phone: String
  address: String
  education: String!
  skills: String!
  location: String!
  email: String
  password: String!
}

input TeamsDto {
  name: String!
  location: String!
  address: String!
  phone: String!
  status: String!
}

input AdminStrationLevelDto {
  name: String!
}

input CreateAccountInput {
  email: String!
  password: String!
  role: String!
}

input StaffInputDto {
  name: String!
  gender: String!
  phone: String!
  status: String!
}

input LoginUserDto {
  email: String!
  password: String!
}